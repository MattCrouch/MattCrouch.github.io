{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"markdownRemark":{"html":"<h1>Where does Gatsby get configured?</h1>\n<p>Everything that makes your Gatsby setup unique will pass through <code>gatsby-config.js</code>. As long as it's placed at the root of your project, it will be picked up automatically.</p>\n<pre><code class=\"language-js\">module.exports = {\n  // setup goes here\n};\n</code></pre>\n<p>As long as it exports an object, it can contain any logic necessary to the site.</p>\n<h1>What goes in this file?</h1>\n<p>There's plenty that goes on inside <code>gatsby-config.js</code> - everything from metadata to plugins and polyfills.</p>\n<h2>Â siteMetadata</h2>\n<p>Every site has some kind of metadata to go along with it, such as a title or keywords for SEO. If they need to be used in more than just one place, this is a good place to put them.</p>\n<p>There's nothing specific that <em>needs</em> to go in <code>siteMetadata</code>. Anything that makes sense for you is perfectly fine, including objects.</p>\n<pre><code class=\"language-js\">siteMetadata: {\n  title: \"Gatsby Blog\",\n  description: \"A site all about the wonders of Gatsby\"\n},\n</code></pre>\n<h2>plugins</h2>\n<p>Gatsby runs off of plugins. There's plugins for all sorts of things - from Markdown to TypeScript.</p>\n<p>The <code>plugins</code> property is an array. Each entry can be an object that configures the plugin, or a plain string if the plugin does not require any setting up.</p>\n<pre><code class=\"language-js\">plugins: [\n  \"gatsby-plugin-react-helmet\",\n  {\n    resolve: `gatsby-source-filesystem`,\n    options: {\n      name: `images`,\n      path: `${__dirname}/src/images`\n    }\n  }\n],\n</code></pre>\n<h2>pathPrefix</h2>\n<p>A <code>pathPrefix</code> is used whenever the hosted site will live somewhere other than the root of the domain. If a site lived in a <code>/site</code> subdirectory, for example, that would need to be the <code>pathPrefix</code>.</p>\n<pre><code class=\"language-js\">pathPrefix: \"/site\",\n</code></pre>\n<h2>polyfill</h2>\n<p>Gatsby is a forward-thinking framework with speed in mind. They use the Promise API to get data as it's needed. By default, they use their own polyfill to support older browsers.</p>\n<p>If needed, it can be turned off through this setting.</p>\n<pre><code class=\"language-js\">polyfill: false,\n</code></pre>\n<h2>mapping</h2>\n<p>Sometimes, certain data gets used in place of others for the sake of simplicity or space. For example, a set of IDs might be used to link to specific products in a database.</p>\n<p>The <code>mapping</code> property allows Gatsby to bridge the gap between two sets of data by knowing about how they relate. This mapping can then be used by GraphQL.</p>\n<pre><code class=\"language-js\">mapping: {\n  \"MarkdownRemark.frontmatter.products\": 'ProductsList',\n},\n</code></pre>\n<h2>proxy</h2>\n<p>While developing, it's possible certain requests need proxying to a different location. For example, you may wany API calls to hit a local server rather than the live one.</p>\n<p>All it takes to apply a proxy is a URL prefix and where it should fire that request to instead.</p>\n<pre><code class=\"language-js\"> proxy: {\n  prefix: \"/api\",\n  url: \"http://localhost:8080\",\n},\n</code></pre>\n<h2>developMiddleware</h2>\n<p>Think of <code>developMiddleware</code> as a secret entrance into the <code>develop</code> Express server provided by Gatsby. It allows access to the instance it is using in order to apply middleware.</p>\n<p>The usefulness of this may be limited, but could get you out of a tight spot. For example, it may help debugging by logging more appropriate data.</p>\n<h1>Where can I find out more about Gatsby config?</h1>\n<p>Find out more about <code>gatsby-config.js</code> on the <a href=\"https://www.gatsbyjs.org/docs/gatsby-config/\">Gatsby site</a>.</p>","frontmatter":{"date":"December 02, 2018","title":"Setting up Gatsby config"}}},"pageContext":{}}