{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"markdownRemark":{"html":"<h1>What are Node APIs?</h1>\n<p>Gatsby builds your site using Node. It provides a small set of APIs to allow you to tap into its working and help you guide it in the right direction.</p>\n<p>For example Gatsby will only pick up certain pages by default. By using the Node APIs it's possible to help create other pages from related data.</p>\n<h1>Where do they live?</h1>\n<p>Gatsby will pick up any Node API calls from <code>gatsby-node.js</code>. As long as this file is at the root of the project, it will find it automatically.</p>\n<p>There's plenty of Node APIs to go around, but here are a few of the more useful ones.</p>\n<h2> createPages</h2>\n<p>Pages within <code>/pages</code> will get picked up by Gatsby without issue. But what happens if more need to be generated somehow, like from a JSON file or other data source?</p>\n<p>By using <code>createPages</code> we can instruct Gatsby to use a certain React component to stamp out a new page for us.</p>\n<p>This will be called after it has transformed all the data its told to. This means it can be queried for using GraphQL.</p>\n<p>The function returns a Promise, which will resolve once all pages have been created.</p>\n<pre><code class=\"language-js\">exports.createPages = ({ actions, graphql }) => {\n  const { createPage } = actions;\n  createPage({\n    page: \"path/to/page\",\n    component: ComponentToRender\n  });\n  return Promise.resolve();\n};\n</code></pre>\n<p>More information about the <code>createPage</code> action itself can be found in the <a href=\"https://www.gatsbyjs.org/docs/actions/#createPage\">Gatsby documentation</a>.</p>\n<h2> onCreateDevServer</h2>\n<p>This will be called whenever <code>gatsby develop</code> fires up a development server.</p>\n<p>The function is passed the <code>app</code> instance of the server, which can be used as normal.</p>\n<p>It can be useful to set up extra middleware for development purposes, such as logging or stubbing out some server responses. This is a great place to set that up.</p>\n<pre><code class=\"language-js\">exports.onCreateDevServer = ({ app }) => {\n  app.get(\"/test\", (req, res) => res.json({ success: true }));\n};\n</code></pre>\n<h2> onCreateWebpackConfig</h2>\n<p>Every project will have different needs. Sometimes Webpack is required to help with the build process, such as adding in a loader for a specific type of file like SASS.</p>\n<p>Calling <code>setWebpackConfig</code> works as if you were inside the config itself. You can add rules, plugins and loaders in the same format as any other Webpack build.</p>\n<pre><code class=\"language-js\">exports.onCreateWebpackConfig = ({ rules, loaders, actions }) => {\n  actions.setWebpackConfig({\n    module: {\n      rules: [\n        {\n          test: /\\.scss$/,\n          use: [\"sass-loader\"]\n        }\n      ]\n    }\n  });\n};\n</code></pre>\n<h1> Where can I find out about the rest?</h1>\n<p>The <a href=\"https://www.gatsbyjs.org/docs/node-apis/\">Gatsby site</a> is a great resource to refer to, including different ways of calling them.</p>","frontmatter":{"date":"December 03, 2018","title":"Node APIs"}}},"pageContext":{}}