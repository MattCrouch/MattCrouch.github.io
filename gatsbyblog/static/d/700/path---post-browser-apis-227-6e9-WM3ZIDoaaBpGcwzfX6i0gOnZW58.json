{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"markdownRemark":{"html":"<h1>What are browser APIs?</h1>\n<p>Once Gatsby has waved its magic wand and generated all the files, it then serves them to the browser. Sometimes, it needs a little help along the way to get exactly what you're looking for.</p>\n<p>Gatsby's browser APIs are little hooks into its world that hand control back to the developer.</p>\n<h1>Where do they live?</h1>\n<p>All browser API calls live inside <code>gatsby-browser.js</code>. This is situated at the root of the document, which Gatsby picks up automatically.</p>\n<p>There's plenty of APIs going around, but here's a few of the most useful.</p>\n<h2> createPages</h2>\n<p>Pages within <code>/pages</code> will get picked up by Gatsby without issue. But what happens if more need to be generated somehow, like from a JSON file or other data source?</p>\n<p>By using <code>createPages</code> we can instruct Gatsby to use a certain React component to stamp out a new page for us.</p>\n<p>This will be called after it has transformed all the data its told to. This means it can be queried for using GraphQL.</p>\n<p>The function returns a Promise, which will resolve once all pages have been created.</p>\n<pre><code class=\"language-js\">exports.createPages = ({ actions, graphql }) => {\n  const { createPage } = actions;\n  createPage({\n    page: \"path/to/page\",\n    component: ComponentToRender\n  });\n  return Promise.resolve();\n};\n</code></pre>\n<p>More information about the <code>createPage</code> action itself can be found in the [Gatsby documentation][createpage action].</p>\n<h2> onCreateDevServer</h2>\n<p>This will be called whenever <code>gatsby develop</code> fires up a development server.</p>\n<p>The function is passed the <code>app</code> instance of the server, which can be used as normal.</p>\n<p>It can be useful to set up extra middleware for development purposes, such as logging or stubbing out some server responses. This is a great place to set that up.</p>\n<pre><code class=\"language-js\">exports.onCreateDevServer = ({ app }) => {\n  app.get(\"/test\", (req, res) => res.json({ success: true }));\n};\n</code></pre>\n<h2> onCreateWebpackConfig</h2>\n<p>Every project will have different needs. Sometimes Webpack is required to help with the build process, such as adding in a loader for a specific type of file like SASS.</p>\n<p>Calling <code>setWebpackConfig</code> works as if you were inside the config itself. You can add rules, plugins and loaders in the same format as any other Webpack build.</p>\n<pre><code class=\"language-js\">exports.onCreateWebpackConfig = ({ rules, loaders, actions }) => {\n  actions.setWebpackConfig({\n    module: {\n      rules: [\n        {\n          test: /\\.scss$/,\n          use: [\"sass-loader\"]\n        }\n      ]\n    }\n  });\n};\n</code></pre>\n<h1> Where can I find out about the rest?</h1>\n<p>The <a href=\"https://www.gatsbyjs.org/docs/browser-apis/\">Gatsby site</a> holds all the rest of them including how to call them.</p>","frontmatter":{"date":"December 04, 2018","path":"/post/browser-apis","title":"Browser APIs"}}},"pageContext":{}}