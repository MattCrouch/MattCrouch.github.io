{"version":3,"sources":["AnswerGroup.js","Vote.js","VoteContainer.js","App.js","serviceWorker.js","index.js"],"names":["AnswerGroup","field","form","options","className","classNames","error","errors","name","touched","map","label","value","Fragment","key","id","type","htmlFor","OPTIONS","Vote","isSubmitting","autoComplete","component","disabled","VoteContainer","onSubmit","values","a","setSubmitting","console","log","Promise","resolve","setTimeout","initialValues","answer","render","props","validate","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAuCeA,MAlCf,YAAgD,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAClC,OACE,8BAAUC,UAAU,gBAClB,0CAEA,yBACEA,UAAWC,IAAW,CACpB,oBAAoB,EACpBC,QAASJ,EAAKK,OAAON,EAAMO,OAASN,EAAKO,QAAQR,EAAMO,SAIxDL,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACX,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,2CACMX,EADN,CAEEc,GAAE,iBAAYH,GACdJ,KAAMP,EAAMO,KACZQ,KAAK,QACLJ,MAAOA,KAET,2BAAOK,QAAO,iBAAYL,IAAUD,SAKrCT,EAAKK,OAAON,EAAMO,OAASN,EAAKO,QAAQR,EAAMO,OAC/C,yBAAKJ,UAAU,iBAAiBF,EAAKK,OAAON,EAAMO,UCzBtDU,G,MAAU,CACd,CACEP,MAAO,WACPC,MAAO,KAET,CACED,MAAO,WACPC,MAAO,KAET,CACED,MAAO,WACPC,MAAO,KAET,CACED,MAAO,WACPC,MAAO,OAmCIO,MA9Bf,YAAkD,IAAlCZ,EAAiC,EAAjCA,OAAQa,EAAyB,EAAzBA,aAAcX,EAAW,EAAXA,QACpC,OACE,kBAAC,IAAD,CAAML,UAAU,QACd,yBAAKA,UAAU,eAEb,2BAAOa,QAAQ,QAAf,QAEA,yBACEb,UAAWC,IAAW,CACpB,oBAAoB,EACpBC,QAASC,EAAOC,MAAQC,EAAQD,QAIlC,kBAAC,IAAD,CAAOa,aAAa,OAAON,GAAG,OAAOP,KAAK,OAAOQ,KAAK,WACnDT,EAAOC,MAAQC,EAAQD,MACxB,yBAAKJ,UAAU,iBAAiBG,EAAOC,QAM7C,kBAAC,IAAD,CAAOc,UAAWtB,EAAaG,QAASe,EAASV,KAAK,WAGtD,2BAAOe,SAAUH,EAAcJ,KAAK,SAASJ,MAAM,eCV1CY,MArCf,YAAqC,IAAZrB,EAAW,EAAXA,QAEjBsB,EAAQ,uCAAG,WAAOC,EAAP,kBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAEhCC,QAAQC,IAAI,iBAFG,SAGT,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAHlC,OAIfJ,GAAc,GACdC,QAAQC,IAAIJ,GALG,2CAAH,wDAyBd,OACE,kBAAC,IAAD,CACEQ,cAAe,CAAE1B,KAAM,GAAI2B,OAAQ,IACnCV,SAAUA,EACVW,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAiBlC,QAASA,MAC3CmC,SArBa,SAAAZ,GACf,IAAMnB,EAAS,GAWf,MAToB,KAAhBmB,EAAOlB,OACTD,EAAOC,KAAO,oBAGM,KAAlBkB,EAAOS,SACT5B,EAAO4B,OAAS,sBAIX5B,M,MCLIgC,MAlBf,WACE,OACE,oCACE,gCACE,yBAAKnC,UAAU,aACb,oDAGJ,yBAAKA,UAAU,aACb,6BAASA,UAAU,kBAEjB,kBAAC,EAAD,UCJUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24b4d126.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./AnswerGroup.css\";\n\n// List different options to select one from\nfunction AnswerGroup({ field, form, options }) {\n  return (\n    <fieldset className=\"answer-group\">\n      <legend>Answer</legend>\n      {/* Apply a class if there is an error */}\n      <div\n        className={classNames({\n          \"validation-group\": true,\n          error: !!form.errors[field.name] && form.touched[field.name]\n        })}\n      >\n        {/* Iterate over each option and create a `radio` input for it */}\n        {options.map(({ label, value }) => (\n          <React.Fragment key={value}>\n            <input\n              {...field}\n              id={`answer-${value}`}\n              name={field.name}\n              type=\"radio\"\n              value={value}\n            />\n            <label htmlFor={`answer-${value}`}>{label}</label>\n          </React.Fragment>\n        ))}\n\n        {/* Conditionally show an error if the field has been touched */}\n        {!!form.errors[field.name] && form.touched[field.name] && (\n          <div className=\"error-message\">{form.errors[field.name]}</div>\n        )}\n      </div>\n    </fieldset>\n  );\n}\n\nexport default AnswerGroup;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Field, Form } from \"formik\";\nimport AnswerGroup from \"./AnswerGroup\";\nimport \"./Vote.css\";\n\n// Potential voting options\nconst OPTIONS = [\n  {\n    label: \"Answer A\",\n    value: \"a\"\n  },\n  {\n    label: \"Answer B\",\n    value: \"b\"\n  },\n  {\n    label: \"Answer C\",\n    value: \"c\"\n  },\n  {\n    label: \"Answer D\",\n    value: \"d\"\n  }\n];\n\n// Show the form\nfunction Vote({ errors, isSubmitting, touched }) {\n  return (\n    <Form className=\"vote\">\n      <div className=\"input-group\">\n        {/* Label every element as usual */}\n        <label htmlFor=\"name\">Name</label>\n        {/* Apply a class if there is an error */}\n        <div\n          className={classNames({\n            \"validation-group\": true,\n            error: !!errors.name && touched.name\n          })}\n        >\n          {/* Use `Field` to connect to Formik */}\n          <Field autoComplete=\"name\" id=\"name\" name=\"name\" type=\"text\" />\n          {!!errors.name && touched.name && (\n            <div className=\"error-message\">{errors.name}</div>\n          )}\n        </div>\n      </div>\n\n      {/* Use the `component` prop to add a custom component to the form instead */}\n      <Field component={AnswerGroup} options={OPTIONS} name=\"answer\" />\n\n      {/* Submit the form like any other */}\n      <input disabled={isSubmitting} type=\"submit\" value=\"Vote now\" />\n    </Form>\n  );\n}\n\nexport default Vote;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport Vote from \"./Vote\";\n\n// Hold all of the logic for the form\nfunction VoteContainer({ options }) {\n  // Submit form values\n  const onSubmit = async (values, { setSubmitting }) => {\n    // Only called once the form is valid\n    console.log(\"submitting...\");\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setSubmitting(false);\n    console.log(values);\n  };\n\n  // Make sure all the data within the form is valid\n  const validate = values => {\n    const errors = {};\n\n    if (values.name === \"\") {\n      errors.name = \"Name is required\";\n    }\n\n    if (values.answer === \"\") {\n      errors.answer = \"Answer is required\";\n    }\n\n    // The form will not submit without an empty `errors` object\n    return errors;\n  };\n\n  // Define the behaviour of the form using the Formik component\n  return (\n    <Formik\n      initialValues={{ name: \"\", answer: \"\" }}\n      onSubmit={onSubmit}\n      render={props => <Vote {...props} options={options} />}\n      validate={validate}\n    />\n  );\n}\n\nexport default VoteContainer;\n","import React from \"react\";\nimport VoteContainer from \"./VoteContainer\";\nimport \"./App.css\";\n\n// Contain the application\nfunction App() {\n  return (\n    <>\n      <header>\n        <div className=\"container\">\n          <h1>Submit your answer</h1>\n        </div>\n      </header>\n      <div className=\"container\">\n        <section className=\"vote-container\">\n          {/* Display the vote component */}\n          <VoteContainer />\n        </section>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"reset-css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}